@inherits TestComponentBase

@code 
{
    void Setup(Fixture fixture)
    {
        fixture.Services.AddSingleton<SharedState>();
    }
}

<Fixture Setup="Setup" Test="ItExists">
    <ComponentUnderTest>
        <Counter />
    </ComponentUnderTest>

    @code
    {
        void ItExists(Fixture fixture)
        {
            // Arrange
            var cut = fixture.GetComponentUnderTest<Counter>();

            // Assert
            Assert.NotNull(cut);
        }
    }
</Fixture>

<Fixture Setup="Setup" Test="Default_CountIsZero">
    <ComponentUnderTest>
        <Counter />
    </ComponentUnderTest>

    @code
    {
        void Default_CountIsZero(Fixture fixture)
        {
            // Arrange
            var cut = fixture.GetComponentUnderTest<Counter>();

            var counter = cut.Find("#counter");

            // Assert
            Assert.Equal("Current count: 0", counter.InnerHtml);
        }
    }
</Fixture>

<Fixture Setup="Setup" Test="ButtonClicked_CountIsIncremented">
    <ComponentUnderTest>
        <Counter />
    </ComponentUnderTest>

    @code
    {
        void ButtonClicked_CountIsIncremented(Fixture fixture)
        {
            // Arrange
            var cut = fixture.GetComponentUnderTest<Counter>();

            var button = cut.Find("#incrementer");
            var counter = cut.Find("#counter");

            // Act
            button.Click();

            // Assert
            Assert.Equal("Current count: 1", counter.InnerHtml);
        }
    }
</Fixture>

<Fixture Setup="Setup" Test="ButtonClicked_CountIsIncrementedForAll">
    <ComponentUnderTest>
        <Counter />
        <Counter />
    </ComponentUnderTest>

    @code
    {
        void ButtonClicked_CountIsIncrementedForAll(Fixture fixture)
        {
            // Arrange
            var cuts = fixture.GetComponentUnderTest().FindComponents<Counter>();
            var counter1 = cuts.First();
            var counter2 = cuts.Last();

            var button = counter1.Find("#incrementer");
            var count1 = counter2.Find("#counter");
            var count2 = counter2.Find("#counter");

            // Act
            button.Click();

            // Assert
            Assert.Equal("Current count: 1", count1.InnerHtml);
            Assert.Equal(count1.InnerHtml, count2.InnerHtml);
        }
    }
</Fixture>